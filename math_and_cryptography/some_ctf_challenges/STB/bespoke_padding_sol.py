
#this part is done in python
from Crypto.Util.number import bytes_to_long,long_to_bytes, getPrime
import random
import pwn
import json

def take_dict(s):
    m=0
    n=0
    for i in range(0,len(s)):
        if s[i]=="{":
            m=i
        if s[i]=="}":
            n=i
    str=""        
    for i in range(m,n+1):
        str=str+s[i]
    return json.loads(str)

def json_recv():
    line = r.recvline()
    line=line.decode()
    return line

def json_send(hsh):
    request = json.dumps(hsh).encode()
    r.sendline(request)
#the idea is two receive two polynomials and find a linear polynomial that divides both of them in the ring Z_N[x]
r=pwn.connect('socket.cryptohack.org',13386)
json_recv()
request={'option':'get_flag'}
json_send(request)
line=json_recv()
s=take_dict(line)
N=s['modulus']
a1=s['padding'][0]
b1=s['padding'][1]
c1=s['encrypted_flag']
print(N)
print(a1)
print(b1)
print(c1)
request={'option':'get_flag'}
json_send(request)
line=json_recv()
s=take_dict(line)
a2=s['padding'][0]
b2=s['padding'][1]
c2=s['encrypted_flag']
print(a2)
print(b2)
print(c2)

#this part is done in sage
N=28206753917920879369925501686863735999783054889536589923827154759034974622516520293081776728410624923162430067065247356651613451365801782816035662109006526738547798581053102041673016333973146744812420138275020220014172071856300210568507319666275086156420373166598593423688603305077976982127305131558377701261132817430549830757770015276124055049298910945437515576352315643013310642306534220339480891440982463465802663334618987522072956006004654483658770954348983061675427808282911587958090796414719653991962409988689619896681673128251429214556303144563831680578698277187894499810824247834871554446419617588342132653479
R = PolynomialRing(Zmod(N),"x")
a1=21005958258303133147462748345207644699352216061306691734504298750491660054989503210855400346776748417019592720651531252234438902735579461580063424239590894761851936284793339386479336936159613756522211517732429514431559618481372104418671006602876781237567413699307754700995637475030347369315948983775260454333348075147117936248634117410909890727917827629880679143089375877095837920956148893611088134198661278065425991615481276777936794665982331964409263715881115979036720497175363142457476961143304259299309726847407622036045893081817885026429607609902112800754746362603455078593476708738029420656853730966408204193987
b1=1378947847635236738969503334790279861606315559237544173581762431000414893129729912085845451810588645351872058178835320435506006046946686376523638332122605893774724287957787266224149630686926437650212489827086020593919277823780330361445779335815418023019346366933281262456616872047295829088856342919201892720087269226703640241739756737636404363075196614708323240717326010222646242731235350351288052897083796891574586496635761847638330191177536943475315747140269598668486897721202511711670598503797035360666543915207526369902775539421523229696855486541055330719476785253886430023730706581953771459376640330004045547419
c1=23786134432456664128211415837809021551246060648612670450203035584634073497853711781206408074032776704893002658270231086997069361209464324472367631172226965348770044291908557268273457087371470257807226720837374771392866446224173062628282126548586065713745235381920328643199856610727882400574104926560554056149155914749643548836272825356548269834157940921825691080757799378122944649582912590319265859024591060076969018665005317127832914073415380941044115850416739056698495414886054192903808617944240401040463463546187931839805995433261851470428197744683905611865307337547924318003838801043583350247877905744307354780480
a2=17742166974503945268196705258800699432799407374170334402911143442961669840850209231561038987588612593430071125674633342422260969268105959369693883919393775764487064078362027655081727493661676913753894901795815804845616996086648960327389546239598633779003373194432887179706530356915168983430898671419670621690474241278112136388063674638565339289049955964240328840913563164307851874903860545763193391700694639479639704125966859056522471192751386263546636353288169706867804522199674999553891273862020490156499372836812296965931430143740843255563444705618431949418065398150828900637925437293330119724233778792372278997835
b2=20794806491998254589073517442607016467470867317948819914898631620271606833783025207688966174635586614248685852265257141442436128956626924954936571584062532956809222758604542409344843286393470190096865823800452783825729978531133144218371780713360222529770817290971245365623764415421299398021532562488944759893819461649402021487537463974101846757091968326946352718783667372320020916709388126974340686852676316329281003539937982093446050200085232479987533542371222104892316246387319631146861645996540799785614738411724667779423479960525203533357017627355607195615287885198791679975564476102875709375919348845767218180527
c2=20588604998403992391572845720032275587803670041521417836394195069591226583249563697668063797206931488999615132003783392725980088298501673609055287837551686753424053315828280873968013056755979061956741348696619567262630219564079848224105188527838036733284726158748229366796008293558611427809669534600395613956188595908760071040888186230156904903941950257021437714542079549618481649884465837459908422881675154044539382408790057229856376320320539507880296675144777801732429886740948813336348576469791124741524784964353264987620872908032912005294465370773629643957221608880451256115335512577833021142627073786538635432903 
A=R((a1*x+b1)^11-c1)
B=R((a2*x+b2)^11-c2)
# we will run  the algorithm to find the gcd of the two polynomials, until we find a linear polynomial
t=0
while A.degree()>1 and B.degree()>1:
    if gcd(A.list()[A.degree()],N)>1:
       t=gcd(A.list()[A.degree()],N)
       break
    if gcd(B.list()[B.degree()],N)>1:
       t=gcd(B.list()[B.degree()],N)
       break
    if A.degree()>=B.degree():
        c=A.list()[A.degree()]
        d=B.list()[B.degree()]
        d=Integer(d)
        e=pow(d,-1,N)
        e=(e*c)%N
        A=A-e*B.shift(A.degree()-B.degree())
    else:
        c=B.list()[B.degree()]
        d=A.list()[A.degree()]
        d=Integer(d)
        e=pow(d,-1,N)
        e=(e*c)%N
        B=B-e*A.shift(B.degree()-A.degree())


m1=Integer(A.list()[1])
m0=Integer(A.list()[0])
m=(-m0)*(pow(m1,-1,N))%N
print(m)


#this part is done in python, now just decrypt the message
m=long_to_bytes(754659823705280937426684693543545157731789888997963325308215810880829655843345426301)
print(m)
