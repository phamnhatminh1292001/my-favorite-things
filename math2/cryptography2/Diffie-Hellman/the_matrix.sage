import random

P = 2
N = 50
E = 31337

FLAG = b'crypto{??????????????????????????}'

def bytes_to_binary(s):
    bin_str = ''.join(format(b, '08b') for b in s)
    bits = [int(c) for c in bin_str]
    return bits

def generate_mat():
    while True:
        msg = bytes_to_binary(FLAG)
        msg += [random.randint(0, 1) for _ in range(N*N - len(msg))]

        rows = [msg[i::N] for i in range(N)]
        mat = Matrix(GF(2), rows)

        if mat.determinant() != 0 and mat.multiplicative_order() > 10^12:
            return mat

def load_matrix(fname):
    data = open(fname, 'r').read().strip()
    rows = [list(map(int, row)) for row in data.splitlines()]
    return Matrix(GF(P), rows)

def save_matrix(M, fname):
    open(fname, 'w').write('\n'.join(''.join(str(x) for x in row) for row in M))

matr = generate_mat()

ciphertext = matr^E



S='00000001111101100001101010010001001011000110001001\n10111010010100110001011011111110011000001001000001\n01011101000110110101010100100100111110110110011111\n11101100011011010001111011011000100010110001001010\n11111111101001010101001011111101010010011010101001\n10010011101000000010000110100101111011110011101110\n00011100010011010110000000001011000111010101001011\n01001111000110100111110011000101011110010111111110\n01111001110011000100000110010101011111010000000011\n11001101010111111011110110101010001101001001111101\n01100111000100010101000001011011001101001110101000\n00010001001011101111100010101101011000101100010111\n01101100101101011101101000110001011111111010000100\n00001110111111000111111100011110000101100100000011\n10001001111111011000111011111010110111111111000110\n01111101100011110110111000011110000100111001110100\n11111100110101111001111000110100011010111011110001\n00100011011100101010111011111100000010000101111111\n01111001110100011111011100100011011010010011111000\n01011011101011111111101011011011000111110011111010\n00010100110111110011111100111101100000001101110111\n10011011011101110101100110110000011101000010101011\n01111000001111011011111000100010010010010111101001\n00100000010001110000001101111100011111110011011000\n10010101101011011111101111101000111010010011111001\n10011011000111000001010111011000000000100111100011\n11001001010001111111000011011011101001101010001000\n00100100000101110010001001011001111011001110100001\n00000101000101100111010111101010001101111110011001\n00101000011010100110100111111110000101011001011110\n11011001001111111010000001100111011101101100110110\n00111000011011011111111011110001001101001101101100\n11110010101001100110000110110000100000101010101011\n00101001000011001110110111100010010011100101001000\n11000100010010111110110010100110110110101000110110\n01101011000111001111011110000110001011111000011100\n11010011001111111110100101100011000000000011110001\n10000011000101100011000110111111011010110111101000\n11000011000100010001001011010011010000001101100011\n11011001111001010100010101001100001010101100010010\n10110101010111111010110001111111100100110001001100\n11101001100110001001001100000011100101001010011010\n10000011100110001101010110010010100001010011011101\n10001110111111100110011000010000011011011111011001\n00011100011111110101011100111000110010100011000010\n00111111010010111100100101100001001011110101111100\n10000100101101000011011010100100011111100101101111\n00011101110001001010111001111011111110110011011001\n11111100110101111100110001011001000001111100110011\n00110010110110011001001111110110000011001111010110'
S=S.split('\n')
rows=[]
for i in S:
    C=[]
    for j in i:
        C+=[int(j)]
    rows+=[C]
sum=1
sum*=2**(N*(N-1)//2)
for i in range(1,N+1):
    sum*=2**i-1
mat = Matrix(GF(2), rows)
D=pow(E,-1,sum)
D=Integer(D)
decrypt=mat^D
decrypt=decrypt.transpose()
decrypt=decrypt.str()
s=''
for i in decrypt:
    if i=='0' or i=='1':
        s+=i
i=0
s2=[]
while i<8*len(FLAG):
    s2+=[s[i:i+8]]
    i+=8
s2=[chr(int(x,2)) for x in s2]
s3=''
for j in s2:
    s3+=j
print(s3)
