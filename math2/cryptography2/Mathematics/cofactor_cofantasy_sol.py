import math
import pwn
import json
FLAG = b"crypto{???????????????????????????????????}"
def check(r,NQRprime,QRprime):
    for i in NQRprime:
        if r%i==0:
            return False
    t1=pow(r,(NQRprime[0]-1)//2,NQRprime[0])
    if t1==1:
        for i in NQRprime:
            if pow(r,(i-1)//2,i) !=1:
                return False
        return True 
    else:
        for i in NQRprime:
            if pow(r,(i-1)//2,i) ==1:
                return False
    for i in QRprime:
        if pow(r,(i-1)//2,i) !=1:
            return False
        return True 


def take_dict(s):
    m=0
    n=0
    for i in range(0,len(s)):
        if s[i]=="{":
            m=i
        if s[i]=="}":
            n=i
    str=""        
    for i in range(m,n+1):
        str=str+s[i]
    return json.loads(str)

def json_recv():
    line = r.recvline()
    line=line.decode()
    return line

def json_send(hsh):
    request = json.dumps(hsh).encode()
    r.sendline(request)

N = 56135841374488684373258694423292882709478511628224823806418810596720294684253418942704418179091997825551647866062286502441190115027708222460662070779175994701788428003909010382045613207284532791741873673703066633119446610400693458529100429608337219231960657953091738271259191554117313396642763210860060639141073846574854063639566514714132858435468712515314075072939175199679898398182825994936320483610198366472677612791756619011108922142762239138617449089169337289850195216113264566855267751924532728815955224322883877527042705441652709430700299472818705784229370198468215837020914928178388248878021890768324401897370624585349884198333555859109919450686780542004499282760223378846810870449633398616669951505955844529109916358388422428604135236531474213891506793466625402941248015834590154103947822771207939622459156386080305634677080506350249632630514863938445888806223951124355094468682539815309458151531117637927820629042605402188751144912274644498695897277
phi = 56135841374488684373258694423292882709478511628224823806413974550086974518248002462797814062141189227167574137989180030483816863197632033192968896065500768938801786598807509315219962138010136188406833851300860971268861927441791178122071599752664078796430411769850033154303492519678490546174370674967628006608839214466433919286766123091889446305984360469651656535210598491300297553925477655348454404698555949086705347702081589881912691966015661120478477658546912972227759596328813124229023736041312940514530600515818452405627696302497023443025538858283667214796256764291946208723335591637425256171690058543567732003198060253836008672492455078544449442472712365127628629283773126365094146350156810594082935996208856669620333251443999075757034938614748482073575647862178964169142739719302502938881912008485968506720505975584527371889195388169228947911184166286132699532715673539451471005969465570624431658644322366653686517908000327238974943675848531974674382848
g = 986762276114520220801525811758560961667498483061127810099097
factorphi=[8283697070778162053742482718849178557699871051287646645373,45993443414239106736401407496777527064503456994768876548061,90661402691970351503632953321522421595244894366392591160743,380181502012789038802313382141353415036423733466438709525659,402208587311836207725278817306284132596431738356791109872133,481098136625662610293220088298557895798991955045784142596739,599329889273421437328438399825341318351164796257806436949033,628579606389710153109584608973398609891707864182994253934513,644455884672591140489081023986690861190411817835783296759903,838488255325884033706175482434455296708973689592474723911703,889670106019946886695863000684354888430153144370779544766379,900876060690124894677979869390615331047333688179812875895771,1017980373098023995228984726286402934519308020335885284102601,1063828432590464477693140547911511810393174576140236580111559,1290024201902942934760297327477459100753238099682099372323071,1478844260271417371264408016202928011634567641037431093728209]
factorN=[2*i+1 for i in factorphi]
NQRprime=[]
for i in factorN:
    if pow(g,(i-1)//2,i) !=1:
        NQRprime.append(i)
QRprime=[]
for i in factorN:
    if pow(g,(i-1)//2,i) ==1:
        QRprime.append(i)
r=pwn.connect('socket.cryptohack.org',13398)
line=json_recv()
count=0
listword=[]
o=0
while count<8*len(FLAG):
    if count%8==0:
        o=0
    rand=0
    m=True
    while(rand<3):
        request={'option':'get_bit','i':count}
        json_send(request)
        line=json_recv()
        s=take_dict(line)
        R=int(s['bit'],16)
        m=check(R,NQRprime)
        if m==False:
            break
        rand+=1
    if (m==True):
        o+=pow(2,count%8)
    if count%8==7:
        listword.append(chr(o))
    count+=1
s=""
for i in listword:
    s+=i
print(s)
    
