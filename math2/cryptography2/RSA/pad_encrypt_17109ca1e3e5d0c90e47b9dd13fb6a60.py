#!/usr/bin/env python3

from Crypto.PublicKey import RSA
from Crypto.Util.number import bytes_to_long, long_to_bytes
import gmpy2


FLAG = b"crypto{???????????????????????????????????}"

def pad100(msg):
    return msg + b'\x00' * (100 - len(msg))



n = 95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103
e = 3
c = 63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828


#solution:
#the padding above gives us 256^57*m because in hex base, it only add 57 zeroes behind.
#the size of FLAG has at most 1032 bits


for i in range(43,44):
    x1=i
    x2=pow(256,3*(100-x1),n)
    x3=pow(x2,-1,n)
    x4=(x3*c)%n
    for j in range (1,64):
            x6=n*j+x4
            x5=gmpy2.iroot(x6,3)[0]
            x5=long_to_bytes(x5)
            if b'crypto' in x5:
                print(x5)
    print('-------------------')
